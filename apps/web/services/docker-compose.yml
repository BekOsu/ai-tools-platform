version: '3.8'

services:
  # Trading Analysis Service (Go)
  trading-service:
    build: ./trading-service
    container_name: trading-service
    ports:
      - "8001:8001"
    environment:
      - GO_ENV=production
    networks:
      - ai-platform
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Code Generation Service (Node.js + TypeScript)
  codegen-service:
    build: ./codegen-service
    container_name: codegen-service
    ports:
      - "8002:8002"
    environment:
      - NODE_ENV=production
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    networks:
      - ai-platform
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - codegen-logs:/app/logs

  # Image Processing Service (Python + OpenCV)
  image-processing-service:
    build: ./image-processing-service
    container_name: image-processing-service
    ports:
      - "8003:8003"
    environment:
      - PYTHON_ENV=production
    networks:
      - ai-platform
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - image-uploads:/app/uploads
      - image-processed:/app/processed

  # Text Analysis Service (Python + NLP)
  text-analysis-service:
    build: ./text-analysis-service
    container_name: text-analysis-service
    ports:
      - "8004:8004"
    environment:
      - PYTHON_ENV=production
    networks:
      - ai-platform
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Audio Synthesis Service (Python + PyTorch)
  audio-synthesis-service:
    build: ./audio-synthesis-service
    container_name: audio-synthesis-service
    ports:
      - "8005:8005"
    environment:
      - PYTHON_ENV=production
    networks:
      - ai-platform
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - audio-uploads:/app/uploads
      - audio-generated:/app/generated
      - audio-processed:/app/processed

  # Resume Builder Service (Node.js + PDF)
  resume-builder-service:
    build: ./resume-builder-service
    container_name: resume-builder-service
    ports:
      - "8006:8006"
    environment:
      - NODE_ENV=production
    networks:
      - ai-platform
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    volumes:
      - resume-generated:/app/generated
      - resume-templates:/app/templates
      - resume-uploads:/app/uploads

  # API Gateway (Nginx) - Optional reverse proxy
  api-gateway:
    image: nginx:alpine
    container_name: api-gateway
    ports:
      - "8000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - trading-service
      - codegen-service
      - image-processing-service
      - text-analysis-service
      - audio-synthesis-service
      - resume-builder-service
    networks:
      - ai-platform
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    networks:
      - ai-platform
    restart: unless-stopped

  # PostgreSQL for persistent data storage
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      - POSTGRES_DB=ai_platform
      - POSTGRES_USER=ai_user
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-ai_password_123}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ai-platform
    restart: unless-stopped

  # MongoDB for document storage
  mongo:
    image: mongo:7
    container_name: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-mongo_password_123}
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    networks:
      - ai-platform
    restart: unless-stopped

  # Monitoring with Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - ai-platform
    restart: unless-stopped

  # Grafana for monitoring dashboards (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - ai-platform
    restart: unless-stopped

networks:
  ai-platform:
    driver: bridge

volumes:
  # Service-specific volumes
  codegen-logs:
  image-uploads:
  image-processed:
  audio-uploads:
  audio-generated:
  audio-processed:
  resume-generated:
  resume-templates:
  resume-uploads:
  
  # Database volumes
  redis-data:
  postgres-data:
  mongo-data:
  
  # Monitoring volumes
  prometheus-data:
  grafana-data: